#+TITLE: Oh My Emacs GUI
#+OPTIONS: toc:nil num:nil ^:nil

This is part of [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

* Basic GUI Settings
  #+NAME: gui-basics
  #+BEGIN_SRC emacs-lisp
            ;; show column number and line number
            (dolist (mode '(column-number-mode line-number-mode))
              (when (fboundp mode) (funcall mode t)))
            ;; show unncessary whitespace that can mess up your diff
            (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))
        (add-hook 'c-mode-common-hook   'hs-minor-mode)
        (global-set-key (kbd "<f5>") (lambda ()
                                       (interactive)
                                       (setq-local compilation-read-command nil)
                                       (call-interactively 'compile)))

    (defun list-to-string (list)
      "thisandthat."
      (interactive)
      (when (consp list)
        (let ((var1 (car list)))
          (if (stringp (car list))
              (cond ((consp (cdr list)) (concat (car list) " " (list-to-string (cdr list))))
                    (t (car list)))
            (list-to-string (cdr list)))
          )))

    ;; use space to indent by default
    (setq-default indent-tabs-mode nil)

    (defun walk-directory (dirname fn &optional directories-p testfn)
      (let ((directories (and directories-p t))
            (test (or (if (functionp testfn) testfn nil) #'(lambda (name) t))))
        (cl-labels
            ((walk (name)
                   (let ((fnd (file-name-nondirectory name)))
                     (cond
                      ((file-directory-p name)
                       (if (not (string-match "^\\.+$" fnd))
                           (progn
                             (when (and directories (funcall test name))
                               (funcall fn name))
                             (dolist (x (directory-files name t)) (walk x)))))
                      ((funcall test name) (funcall fn name))))))
          (walk dirname))))

            ;; (dolist (mode-hook '(text-mode-hook prog-mode-hook conf-mode-hook))
            ;;   (add-hook mode-hook
            ;;             (lambda ()
            ;;               (linum-mode 1))))

            ;; make the fringe thinner (default is 8 in pixels)
            (fringe-mode 4)

            ;; show parenthesis match
            (show-paren-mode 1)
            (setq show-paren-style 'expression)
            (defadvice show-paren-function
                (around show-paren-closing-before
                        activate compile)
              (if (eq (syntax-class (syntax-after (point))) 5)
                  (save-excursion
                    (forward-char)
                    ad-do-it)
                ad-do-it))

            ;; Toggle line highlighting in all buffers
            (global-hl-line-mode t)
            (set-face-background 'hl-line "#3e4446")
            (set-face-foreground 'highlight nil)

            ;;(add-hook 'org-mode-hook (lambda () (spacemacs/toggle-line-numbers-off)) 'append)
            ;;(add-hook 'find-file-hook 'spacemacs/check-large-file)
            (global-visual-line-mode t)
  #+END_SRC

* buffer read only default
  #+BEGIN_SRC emacs-lisp
    ;; (defun check-file-name ( filename )
    ;;   (cond ((or (string= filename ".ido.last")
    ;;          (string= filename "COMMIT_EDITMSG")
    ;;          (string= filename ".spacemacs")
    ;;          (string= filename "bookmark"))
    ;;    t)
    ;;   ((string-match "\\.\\(org\\|html\\|org_archive\\)$" filename )
    ;;    t)
    ;;   ((string-match "\\.\\(el\\)$" filename )
    ;;    t)
    ;;   ((string-match "\\.\\(json\\)$" filename )
    ;;    t)
    ;;   ((string-match "bookmarks" filename )
    ;;    t)
    ;;   (nil)))

    ;; (add-hook 'find-file-hook
    ;;     (lambda ()
    ;;       (when (file-exists-p (file-name-nondirectory buffer-file-name))
    ;;         (if (check-file-name (file-name-nondirectory buffer-file-name))
    ;;       nil
    ;;     (toggle-read-only t)))))
  #+END_SRC

* Double-Mouse-1 selects text and symbol in Emacs
  #+BEGIN_SRC emacs-lisp
(defun get-word-boundary ()
 "Return the boundary of the current word.
 The return value is of the form: (cons pos1 pos2).
 "
 (save-excursion
  (let (p1 p2)
   (progn
    (skip-chars-backward "-A-Za-z0-9_.") ;; here you can choose which symbols to use
    (setq p1 (point))
    (skip-chars-forward "-A-Za-z0-9_.") ;; put the same here
    (setq p2 (point)))
   (cons p1 p2)
  ))
)
(defun select-word ()
"Mark the url under cursor."
(interactive)
;  (require 'thingatpt)
(let (bds)
  (setq bds (get-word-boundary))

  (set-mark (car bds))
  (goto-char (cdr bds))
  )
)
(global-set-key [double-mouse-1] 'select-word)
  #+END_SRC

* company key
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'company
      (progn
        (require 'company)
        (defvar tab-control-auto nil)

        (defun backspace-whitespace-to-tab-stop ()
          "Delete whitespace backwards to the next tab-stop, otherwise delete one character."
          (interactive)
          (if (or indent-tabs-mode
                  (region-active-p)
                  (save-excursion
                    (> (point) (progn (back-to-indentation)
                                      (point)))))
              (call-interactively 'backward-delete-char-untabify)
                                            ; (call-interactively 'backward-delete-char)
            (let ((movement (% (current-column) tab-width))
                  (p (point)))
              (when (= movement 0) (setq movement tab-width))
              ;; Account for edge case near beginning of buffer
              (setq movement (min (- p 1) movement))
              (save-match-data
                (if (string-match "[^\t ]*\\([\t ]+\\)$" (buffer-substring-no-properties (- p movement) p))
                    (backward-delete-char (- (match-end 1) (match-beginning 1)))
                  (call-interactively 'backward-delete-char))))))

        (defun company-abort-and-insert-space ()
          (interactive)
          (company-abort)
          (insert " "))
        (defun company-complete-selection-insert-key (company-key)
          (company-complete-selection)
          (insert company-key))
        (defun company-complete-selection-insert-key-and-complete (company-key)
          (company-complete-selection-insert-key company-key)
          (company-complete))

        ;; Company start
        (defun company-backspace ()
          (interactive)
          (if (equal company-selection-changed nil)
              (if tab-control-auto (backward-delete-char-untabify 1)
                (backspace-whitespace-to-tab-stop))
            (company-abort)))

        (define-key company-active-map (kbd "SPC") #'company-abort-and-insert-space)
        (define-key company-active-map (kbd "SPC") #'company-abort-and-insert-space)
        (define-key company-active-map (kbd ".") (lambda() (interactive) (company-complete-selection-insert-key-and-complete '".")))
        (define-key company-active-map (kbd ";") (lambda() (interactive) (company-complete-selection-insert-key '";")))
        (define-key company-active-map (kbd "C-e") #'company-other-backend)
        (define-key company-active-map (kbd "<backspace>") 'company-backspace)
        )

      )
  #+END_SRC

* diminish mode
  #+BEGIN_SRC emacs-lisp
(diminish 'git-gutter-mode "")
(diminish 'helm-gtags-mode "")
  #+END_SRC

* insert current date
  #+begin_src emacs-lisp
    (defun insert-datetime ()
      "Insert date at point."
      (interactive)
      (insert (format-time-string "%Y-%m-%d %l:%M:%S")))
  #+end_src
