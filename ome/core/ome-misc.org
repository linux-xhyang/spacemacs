#+TITLE: Oh My Emacs Miscs
#+OPTIONS: toc:nil num:nil ^:nil

* Basic GUI Settings
  #+NAME: gui-basics
  #+BEGIN_SRC emacs-lisp
	(setq show-paren-style 'expression)
	(defadvice show-paren-function
		(around show-paren-closing-before
				activate compile)
	  (if (eq (syntax-class (syntax-after (point))) 5)
		  (save-excursion
			(forward-char)
			ad-do-it)
		ad-do-it))

	;; Toggle line highlighting in all buffers
	(global-hl-line-mode t)
	(set-face-background 'hl-line "#3e4446")
	(set-face-foreground 'highlight nil)
	(global-visual-line-mode t)

	(setq ring-bell-function 'ignore)
	;; enable to support navigate in camelCase words
	(global-subword-mode t)

	;; shell-mode settings
	(unless (eq system-type 'windows-nt)
	  (setq explicit-shell-file-name "/bin/bash")
	  (setq shell-file-name "/bin/bash"))
  #+END_SRC

* Rainbow Delimiters
  :PROPERTIES:
  :CUSTOM_ID: rainbow-delimiters
  :END:

  "RainbowDelimiters is a "rainbow parentheses"-like mode which highlights
  parentheses, brackets, and braces according to their depth. Each successive
  level is highlighted in a different color. This makes it easy to spot matching
  delimiters, orient yourself in the code, and tell which statements are at a
  given depth."

  #+NAME: rainbow-delimiters
  #+BEGIN_SRC emacs-lisp
	(rainbow-delimiters-mode)
  #+END_SRC

* astyle
  #+BEGIN_SRC emacs-lisp
	(defvar astyle-google-command "astyle --style=google -s4 -f -p -H -U -y --break-after-logical")
	(defvar astyle-linux-command "astyle --style=linux --indent=force-tab=8 --align-pointer=name --max-code-length=80 --break-after-logical -p -H -U -xj")

	(defun astyle-google (start end)
	  "Run astyle on region or buffer"
	  (interactive (if mark-active
					   (list (region-beginning) (region-end))
					 (list (point-min) (point-max))
					 ))
	  (let ((anchor (point)))
		(save-restriction
		  (shell-command-on-region start end
								   astyle-google-command
								   (current-buffer) t
								   (get-buffer-create "*Astyle Errors*") t))
		(goto-char anchor)
		))

	(defun astyle-linux (start end)
	  "Run astyle on region or buffer"
	  (interactive (if mark-active
					   (list (region-beginning) (region-end))
					 (list (point-min) (point-max))
					 ))
	  (let ((anchor (point)))
		(save-restriction
		  (shell-command-on-region start end
								   astyle-linux-command
								   (current-buffer) t
								   (get-buffer-create "*Astyle Errors*") t))
		(goto-char anchor)
		))
  #+END_SRC

* init env
  #+begin_src emacs-lisp
	(when (getenv "ANDROID_JAVA_TOOLCHAIN")
	  (setq exec-path (append exec-path (cons (getenv "ANDROID_JAVA_TOOLCHAIN") nil)))
	  (setenv "PATH" (concat (getenv "PATH") ":" (getenv "ANDROID_JAVA_TOOLCHAIN") )))
	(setenv "WORKON_HOME" "~/.pyenv/versions/")
  #+end_src

* projectile
  #+begin_src emacs-lisp
	(with-eval-after-load 'projectile
	  (cond
	   ((executable-find "fd")
		(setq projectile-generic-command
			  (format "%s . --color=never --type f -0 -H -E .git"
					  "fd")
			  projectile-git-command projectile-generic-command
			  projectile-git-submodule-command nil
			  ;; ensure Windows users get fd's benefits
			  projectile-indexing-method 'alien))

	   ((executable-find "rg")
		(setq projectile-generic-command
			  (concat "rg -0 --files --color=never --hidden"
					  (cl-loop for dir in projectile-globally-ignored-directories
							   concat (format " --glob '!%s'" dir)))
			  projectile-git-command projectile-generic-command
			  projectile-git-submodule-command nil
			  ;; ensure Windows users get rg's benefits
			  projectile-indexing-method 'alien))))
  #+end_src
