
#+TITLE: YCMD 配置

* 下载、编译
#+BEGIN_SRC sh
  sudo apt-get install build-essential cmake python-dev
  sudo apt-get install mono-xbuild
  sudo apt-get install libmono-microsoft-build-tasks-v4.0-4.0-cil
  sudo apt-get install mono-dmcs
  git clone https://github.com/Valloric/ycmd.git
  cd ycmd
  git submodule update --init --recursive
  #need gcc version > 4.7 (due to c++11)
  #./build.py --all
  ./build.py --clang-completer  --enable-coverage
  echo "export YCMD_PATH=`pwd`/ycmd" >> ~/.bashrc
#+END_SRC


* 配置 ycmd
#+BEGIN_SRC emacs-lisp

  ;;(set-variable 'ycmd-server-command (list "python" (concat user-home-directory "src/ycmd/ycmd")))
  (set-variable 'ycmd-server-command (list "python" (getenv "YCMD_PATH")))
  ;;(set-variable 'ycmd-server-command (list "python" (getenv "YCMD_PATH")))
  ;;(set-variable 'ycmd-global-config "/path/to/global_config.py")

  ;;If you've got project-specific ycmd configurations (almost certainly called .ycm_extra_conf.py),
  ;;and if you want them automatically loaded by ycmd as needed (which you probably do), then you can
  ;;whitelist them by adding entries to ycmd-extra-conf-whitelist. For example, this will allow automatic
  ;;loading of all .ycm_extra_conf.py files anywhere under ~/my_projects
  (set-variable 'ycmd-global-config (concat ome-dir "modules/global_conf.py"))
  ;;(set-variable 'ycmd-extra-conf-whitelist '("~/src/pulpfiction/common/*" "~/work/linux-src/linux/*"))
  (defun auto-update-ycmd-extral-conf-whitelist ()
    (if (projectile-project-root)
        (let* ((rootdir (projectile-project-root))
               (var (mapcar (lambda (dir)
                        (concat rootdir dir)) '("common/*" "linux/*"))))
              (set-variable 'ycmd-extra-conf-whitelist var))
              (set-variable 'ycmd-extra-conf-whitelist '("~/src/pulpfiction/common/*" "~/work/linux-src/linux/*"))
              ))
  (add-hook 'ycmd-mode-hook (function auto-update-ycmd-extral-conf-whitelist))
#+END_SRC

* company setting
#+BEGIN_SRC emacs-lisp


  ;;company-gtags
  (setq company-backends-c-mode-common '(company-ycmd company-c-headers company-dabbrev-code company-files company-yasnippet))
  (with-eval-after-load 'company
    (define-key company-mode-map (kbd "C-<tab>") 'company-other-backend)
    )
    (add-hook 'c-mode-hook (function ycmd-mode))
  ;;company-gtags
  (setq company-backends-python-mode '(company-anaconda company-ycmd company-dabbrev-code company-files company-yasnippet))
  (setq company-backends-inferior-python-mode '(company-ycmd company-anaconda company-dabbrev-code company-files company-yasnippet))
  (add-hook 'python-mode-hook (function ycmd-mode))

  (spacemacs|defvar-company-backends comint-mode)
  (setq company-backends-comint-mode '(company-anaconda company-ycmd company-dabbrev-code company-files company-yasnippet))
  (spacemacs|add-company-hook comint-mode)

  (with-eval-after-load 'company
    (define-key company-mode-map (kbd "C-<tab>") 'company-other-backend)
    )
  (global-company-mode)
#+END_SRC
