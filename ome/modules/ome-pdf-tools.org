
* pdf-tools
  #+begin_src emacs-lisp
    (require 'saveplace)
    (require 'image-mode)

    (defun my/pdf-view-current-page ()
      (pdf-view-current-page))

    (defun save-place-to-alist ()
         (or save-place-loaded (load-save-place-alist-from-file))
         (let* ((directory (and (derived-mode-p 'dired-mode)
              (boundp 'dired-subdir-alist)
              dired-subdir-alist
              (dired-current-directory)))
          (item (or buffer-file-name
              (and directory
             (expand-file-name (if (consp directory)
                 (car directory)
                     directory))))))
           (when (and item
          (or (not save-place-ignore-files-regexp)
              (not (string-match save-place-ignore-files-regexp
               item))))
       (let ((cell (assoc item save-place-alist))
             (position (cond ((eq major-mode 'hexl-mode)
            (with-no-warnings
              (1+ (hexl-current-address))))
                 ((and (derived-mode-p 'dired-mode) directory)
            (let ((filename (dired-get-filename nil t)))
              (if filename
                  `((dired-filename . ,filename))
                (point))))
                 ((eq major-mode 'pdf-view-mode)
            (my/pdf-view-current-page))
                 (t (point)))))
         (if cell
             (setq save-place-alist (delq cell save-place-alist)))
         (if (and save-place
            (not (and (integerp position)
                (= position 1))))
             (setq save-place-alist
             (cons (cons item position)
                   save-place-alist)))))))

    ;; (defun ome-pdf-view-saveplace-hook ()
    ;;   (let ((buf-list (buffer-list)))
    ;;     (while buf-list
    ;;       (with-current-buffer (car buf-list)
    ;;         (when (eq major-mode 'pdf-view-mode)
    ;;           (let* ((directory (and (derived-mode-p 'dired-mode)
    ;;                                  (boundp 'dired-subdir-alist)
    ;;                                  dired-subdir-alist
    ;;                                  (dired-current-directory)))
    ;;                  (item (or buffer-file-name
    ;;                            (and directory
    ;;                                 (expand-file-name (if (consp directory)
    ;;                                                       (car directory)
    ;;                                                     directory))))))
    ;;             (let ((cell (assoc item save-place-alist))
    ;;                   (position (my/pdf-view-current-page)))
    ;;               (if cell
    ;;                   (setq save-place-alist (delq cell save-place-alist)))
    ;;               (if (and save-place
    ;;                        (not (and (integerp position)
    ;;                                  (= position 1))))
    ;;                   (setq save-place-alist
    ;;                         (cons (cons item position)
    ;;                               save-place-alist)))
    ;;               )
    ;;             )
    ;;           )
    ;;         )
    ;;       (setq buf-list (cdr buf-list)))
    ;;     (if save-place-loaded
    ;;         (save-place-alist-to-file))
    ;;     )
    ;;   )

    ;; (add-hook 'kill-emacs-hook #'ome-pdf-view-saveplace-hook t)

    (defun save-place-find-file-hook ()
      (or save-place-loaded (load-save-place-alist-from-file))
      (let ((cell (assoc buffer-file-name save-place-alist)))
        (if cell
            (progn
              (or revert-buffer-in-progress-p
                  (and (integerp (cdr cell))
                       (if (eq major-mode 'pdf-view-mode)
                           (pdf-view-goto-page (cdr cell))
                         (goto-char (cdr cell)))))
              (setq save-place t)))))
  #+end_src
