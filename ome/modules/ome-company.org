
#+TITLE: Company 配置

* 下载、编译 ycmd
  #+BEGIN_SRC sh
    sudo apt-get install build-essential cmake python-dev -y
    sudo apt-get install mono-xbuild -y
    sudo apt-get install libmono-microsoft-build-tasks-v4.0-4.0-cil -y
    sudo apt-get install mono-dmcs -y
    git clone https://github.com/Valloric/ycmd.git
    cd ycmd
    git submodule update --init --recursive
    #need gcc version > 4.7 (due to c++11)
    #./build.py --all
    ./build.py --clang-completer  --enable-coverage
    echo "export YCMD_PATH=`pwd`/ycmd" >> ~/.bashrc
  #+END_SRC

* 配置 company
  #+BEGIN_SRC emacs-lisp
    (defun ome/ome-python-version ()
      (with-temp-buffer
        (apply #'process-file "python" nil t nil '("--version"))
        (goto-char (point-min))
        (let ((line  (split-string (buffer-string) "\n" t)))
          (dolist (version line)
            (if (string-match-p "^Python" version)
                (let ((ver (substring version 7)))
                  (when (string-match "^\\([0-9]+\\.[0-9]+\\.[0-9]+\\)" ver)
                    (progn
                      (cl-return (match-string 1 ver))
                      )))
              )))))

    (defun string-remove-wildchar (str)
      (if (string-match "*$" str)
          (replace-match "" t t str)
        str))
    (defun auto-update-ycmd-extral-conf-whitelist ()
      (if (projectile-project-root)
          (let* ((rootdir (projectile-project-root))
                 (var (mapcar (lambda (dir)
                                (concat rootdir dir)) '("common/*" "linux/*"))))
            (set-variable 'ycmd-extra-conf-whitelist var))
        (set-variable 'ycmd-extra-conf-whitelist '("~/src/pulpfiction/common/*" "~/work/linux-src/linux/*")))
      (mapcar (lambda (directory)
                (let ((dir (string-remove-wildchar directory)))
                  (when (file-exists-p dir)
                    (if (file-exists-p (concat dir "/.ycm_extra_conf.py"))
                        nil
                      (copy-file (concat ome-dir "modules/.ycm_extra_conf.py") (concat dir "/.ycm_extra_conf.py"))))))
              ycmd-extra-conf-whitelist))

    (defun check-expansion ()
      (save-excursion
        (if (looking-at "\\_>") t
          (backward-char 1)
          (if (looking-at "\\.") t
            (backward-char 1)
            (if (looking-at "->") t nil)))))

    (defun do-yas-expand ()
      (let ((yas/fallback-behavior 'return-nil))
        (yas/expand)))

    (defun tab-indent-or-complete ()
      (interactive)
      (if (minibufferp)
          (minibuffer-complete)
        (if (or (not yas/minor-mode)
                (null (do-yas-expand)))
            (if (check-expansion)
                (company-complete-common)
              (if (eq major-mode 'org-mode)
                  (org-cycle)
                (indent-for-tab-command))))))

    (global-set-key [tab] 'tab-indent-or-complete)
    (defun ome-company/init-company ()
      (with-eval-after-load 'company
        (define-key company-mode-map (kbd "<tab>") 'tab-indent-or-complete)
        )
      (with-eval-after-load 'yasnippet
        (global-set-key (kbd "C-c y") 'company-yasnippet)
        (global-set-key (kbd "C-c i") 'yas-insert-snippet)
        )
      (with-eval-after-load 'yasnippet-snippets
        (push yasnippet-snippets-dir yas-snippet-dirs)
        (yas-reload-all)
        )
      ;;(add-hook 'python-mode-hook 'anaconda-mode)
      (global-company-mode)
      )

    (ome-company/init-company)

    (with-eval-after-load 'lsp-java
      (lsp--client-multi-root (gethash 'jdtls lsp-clients))
      (setf (lsp--client-multi-root (gethash 'jdtls lsp-clients)) '(:multi-root nil))

      (defun gradle-or-maven-hook ()
        (when (eq major-mode 'java-mode)
          (let* ((root (lsp--suggest-project-root))
                 (file (concat root "/.projectile")))
            (if (file-exists-p file)
                (progn
                  (message "not import gradle")
                  (lsp-register-custom-settings
                   '(("java.import.maven.enabled" nil t)
                     ("java.import.gradle.enabled" nil t))))
              (progn
                (message "import gradle")
                (lsp-register-custom-settings
                 '(("java.import.maven.enabled" t t)
                   ("java.import.gradle.enabled" t t))))
              )
            )
          )
        )

      (add-hook 'lsp-before-initialize-hook 'gradle-or-maven-hook)
      )
  #+END_SRC
