
#+TITLE: Company 配置

* 配置 company
  #+BEGIN_SRC emacs-lisp
    (defun ome/ome-python-version ()
      (with-temp-buffer
        (apply #'process-file "python" nil t nil '("--version"))
        (goto-char (point-min))
        (let ((line  (split-string (buffer-string) "\n" t)))
          (dolist (version line)
            (if (string-match-p "^Python" version)
                (let ((ver (substring version 7)))
                  (when (string-match "^\\([0-9]+\\.[0-9]+\\.[0-9]+\\)" ver)
                    (progn
                      (cl-return (match-string 1 ver))
                      )))
              )))))

    (defun string-remove-wildchar (str)
      (if (string-match "*$" str)
          (replace-match "" t t str)
        str))

    (defvar completion-at-point-functions-saved nil)
    (defun ome-company/init-company ()
      (with-eval-after-load 'yasnippet
        (global-set-key (kbd "C-c y") 'company-yasnippet)
        (global-set-key (kbd "C-c i") 'yas-insert-snippet)
        )
      (with-eval-after-load 'yasnippet-snippets
        (push yasnippet-snippets-dir yas-snippet-dirs)
        (yas-reload-all)
        )
      (global-company-mode)

      (define-key company-mode-map [remap indent-for-tab-command]
        'company-indent-for-tab-command)
      (require 'cc-mode)
      (define-key c++-mode-map [remap c-indent-line-or-region]
        'company-indent-for-tab-command)
      (define-key c-mode-map [remap c-indent-line-or-region]
        'company-indent-for-tab-command)

      (define-key java-mode-map [remap c-indent-line-or-region]
        'company-indent-for-tab-command)

      (require 'kotlin-mode)
      (require 'js)
      (add-hook 'kotlin-mode-hook (lambda ()
                                   (setq indent-line-function 'js-indent-line)
                                   ))
      (define-key kotlin-mode-map [remap c-indent-line-or-region]
        'company-indent-for-tab-command)
      )


    (defun company-indent-for-tab-command (&optional arg)
      (interactive "P")
      (let ((completion-at-point-functions-saved completion-at-point-functions)
            (completion-at-point-functions '(company-complete-common-wrapper)))
        (indent-for-tab-command arg)))

    (defun company-complete-common-wrapper ()
      (let ((completion-at-point-functions completion-at-point-functions-saved))
        (company-complete-common)))

    (defun company-yasnippet/disable-after-dot (fun command &optional arg &rest _ignore)
      (if (eq command 'prefix)
          (let ((prefix (funcall fun 'prefix)))
            (when (and prefix (not
                               (eq
                                (char-before (- (point) (length prefix)))
                                ?.)))
              prefix))
        (funcall fun command arg)))

    (advice-add #'company-yasnippet :around #'company-yasnippet/disable-after-dot)

    (ome-company/init-company)
  #+END_SRC
